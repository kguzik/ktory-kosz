{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["allUsers","text","basket","color","App","state","filteredUsers","e","currentTarget","value","this","getFilteredUsersForText","then","setState","Promise","resolve","time","Math","random","setTimeout","filter","user","toLowerCase","includes","class","onInput","filterUsers","bind","placeholder","users","React","Component","UsersList","length","map","data-color","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gOAGMA,G,MAAW,CACf,CACIC,KAAM,kBACNC,OAAQ,SACRC,MAAO,QAEX,CACIF,KAAM,oCACNC,OAAQ,aACRC,MAAO,SAEX,CACIF,KAAM,UACNC,OAAQ,0BACRC,MAAO,SAEX,CACIF,KAAM,uBACNC,OAAQ,6BACRC,MAAO,UAEX,CACIF,KAAM,qBACNC,OAAQ,SACRC,MAAO,QAEX,CACIF,KAAM,kBACNC,OAAQ,aACRC,MAAO,SAEX,CACIF,KAAM,uCACNC,OAAQ,0BACRC,MAAO,SAEX,CACIF,KAAM,mBACNC,OAAQ,6BACRC,MAAO,YAIPC,E,kDACJ,aAAc,IAAD,8BACT,gBAEKC,MAAQ,CACTC,cAAeN,GAJV,E,wDAQDO,GAAG,IAAD,OACJN,EAAOM,EAAEC,cAAcC,MAE7BC,KAAKC,wBAAwBV,GAAMW,MAAK,SAAAN,GACpC,EAAKO,SAAS,CACVP,uB,8CAKYL,GACxB,OAAO,IAAIa,SAAQ,SAAAC,GACf,IAAMC,EAA6B,KAArBC,KAAKC,SAAW,GAC9BC,YAAW,WACX,IAAMb,EAAgBN,EAASoB,QAAO,SAAAC,GAAI,OAAIA,EAAKpB,KAAKqB,cAAcC,SAAStB,EAAKqB,kBACpFP,EAAQT,KACLU,Q,+BAIH,OACI,yBAAKQ,MAAM,2BACP,yBAAKA,MAAM,mBACP,uDACA,2BAAOC,QAASf,KAAKgB,YAAYC,KAAKjB,MAAOkB,YAAY,mBAE7D,kBAAC,EAAD,CAAWC,MAAOnB,KAAKL,MAAMC,qB,GAnCzBwB,IAAMC,WAyClBC,EAAY,SAAC,GAAa,IAAZH,EAAW,EAAXA,MAClB,OAAGA,EAAMI,OAAS,EAEV,wBAAIT,MAAM,eACLK,EAAMK,KAAI,SAAAb,GAAI,OAAI,wBAAIG,MAAM,2BAA2BW,aAAYd,EAAKlB,MAAOiC,IAAKf,EAAKpB,MAAOoB,EAAKpB,KAAK,wCAAoB,8BAAOoB,EAAKnB,aAKnJ,uBAAGsB,MAAM,+BAAT,wDAISpB,ICxFKiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0581e1fc.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst allUsers = [\n  {\n      text: 'Worek papierowy',\n      basket: 'Papier',\n      color: 'blue'\n  },\n  {\n      text: 'Szklane opakowanie po kosmetykach',\n      basket: 'Szkło',\n      color: 'green'\n  },\n  {\n      text: 'Obierki',\n      basket: 'Odpadki biodegradowalne',\n      color: 'brown'\n  },\n  {\n      text: 'Puszka po konserwach',\n      basket: 'Metale i tworzywa sztuczne',\n      color: 'yellow'\n  },\n  {\n      text: 'Gazeta, czasopismo',\n      basket: 'Papier',\n      color: 'blue'\n  },\n  {\n      text: 'Szklane butelki',\n      basket: 'Szkło',\n      color: 'green'\n  },\n  {\n      text: 'Gałęzie drzew i krzewów',\n      basket: 'Odpadki biodegradowalne',\n      color: 'brown'\n  },\n  {\n      text: 'Plastikowa torba',\n      basket: 'Metale i tworzywa sztuczne',\n      color: 'yellow'\n  },\n];\n\nclass App extends React.Component {\n  constructor(){\n      super();\n\n      this.state = {\n          filteredUsers: allUsers\n      }\n  }\n\n  filterUsers(e){\n      const text = e.currentTarget.value;\n      //const filteredUsers = this.getFilteredUsersForText(text);\n      this.getFilteredUsersForText(text).then(filteredUsers => {\n          this.setState({\n              filteredUsers\n          });\n      })\n  }\n\n  getFilteredUsersForText(text) {\n  return new Promise(resolve => {\n      const time = (Math.random() + 1) * 250;\n      setTimeout(() => {\n      const filteredUsers = allUsers.filter(user => user.text.toLowerCase().includes(text.toLowerCase()));\n      resolve(filteredUsers);\n      }, time) ;\n  });\n  }\n  render(){\n      return (\n          <div class=\"container-fluid p-0 m-0\">\n              <div class=\"input-container\">\n                  <p>Co chcesz wyrzucić?</p>\n                  <input onInput={this.filterUsers.bind(this)} placeholder=\"Wpisz produkt\"/>\n              </div>\n              <UsersList users={this.state.filteredUsers}/>\n          </div>\n      );\n  }\n}\n\nconst UsersList = ({users}) => {\n  if(users.length > 0){\n      return (\n          <ul class=\"row p-0 m-0\">\n              {users.map(user => <li class=\"col-12 col-sm-6 col-lg-4\" data-color={user.color} key={user.text}>{user.text}<span>&#8681;</span><span>{user.basket}</span></li>)}\n          </ul>\n      );\n  }\n  return (\n      <p class=\"text-center p-4 none-result\">Brak wyników, spróbuj wyszukać ponownie.</p>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}